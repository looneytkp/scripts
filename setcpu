#!/bin/bash
set -e
shopt -u nocasematch
#installs dependencies required to use setcpu if not installed
if [ ! -e /usr/bin/cpupower ]; then
	sudo pacman -S cpupower
fi

DIR=~/.setcpu
FILE=$DIR/config
CPU=$DIR/cpu
if [ ! -d ~/.setcpu ]; then mkdir ~/.setcpu;fi
touch $FILE; touch $CPU

#write function, called on first execution
_write() {
	ls /sys/devices/system/cpu/ | grep "cpu[0-9]" > $CPU
	if grep -q "setcpu" $FILE; then
		return
	else
		{
			echo 'alias powersave="setcpu -g powersave"'
			echo 'alias conservative="setcpu -g conservative"'
			echo 'alias ondemand="setcpu -g ondemand"'
			echo 'alias performance="setcpu -g performance"'
			echo 'alias schedutil="setcpu -g schedutil"'
		} >> $FILE
	fi
	LLEHS=$(echo $SHELL)
	if [ $LLEHS == /bin/bash ]; then
		echo "source $FILE" >> ~/.bashrc
		source ~/.bashrc
	elif [ $LLEHS == /bin/zsh ]; then
		echo -e "source $FILE" >> ~/.zshrc
		source ~/.zshrc
	fi
}

#installs setcpu on first execution
if [ ! -e /usr/bin/setcpu ]; then
	read -rp "setcpu is not installed, install ? Y/n > " INSTALL
	case "$INSTALL" in
		y|yes)
			_write
			sudo cp -v setcpu /usr/bin/
			echo "executing...";sleep 1;;
		n|no)
			exit 0;;
	esac
fi

case $1 in
#called when no argument is passed to the setcpu command
	"")
		echo -e "\\nCurrent governor:"
		a=$(wc -l <"$CPU"); b=0
		while true; do
			if [[ $b < $a ]]; then
				gov=$(cat /sys/devices/system/cpu/cpu"$b"/cpufreq/scaling_governor)
				echo "CPU$b: $gov"
				b=$((b+1))
			else
				break
			fi
		done
		printf "\\nUsage: "; uptime -p|sed "s/up //"
		upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage"|sed -e "s/.*state:               /State: /" -e "s/.*percentage:          /Percentage: /" -e "s/.*time to empty:       /Time to empty: /" -e "s/.*time to full:        /Time to full: /"
		echo;;

#uninstall
	-u|--uninstall)
		read -rp "uninstall setcpu? Y/n > " UNINSTALL
		case $UNINSTALL in
			y|yes)
				if [ -e /usr/bin/setcpu ]; then
					LLEHS=$(echo $SHELL)
					uninstall() {
						if grep -q "setcpu" $rc; then
							a=$(grep -n "setcpu" $rc|sed "s/:.*//")
							sed -i "$a"d $rc
						fi
					}
					if [ $LLEHS == /bin/bash ]; then
						rc=~/.bashrc
						uninstall
					elif [ $LLEHS == /bin/zsh ]; then
						rc=~/.zshrc
						uninstall
					fi
					sudo rm -rf /usr/bin/setcpu $DIR
					echo "done!"
				else
					echo "setcpu is not installed"
				fi;;
			n|no)
				exit 0;;
		esac;;
		
#set one governor for all cpu's
	-g|--governor)
		case $2 in
			"")
				echo "error: no governor specified (use -h for help)";;
			performance|powersave|ondemand|conservative|schedutil)
				sudo cpupower frequency-set -g "$2"
				echo -e "\\nAll cpu's are set to $2'";;
			*)
				echo "error: incorrect governor: $2";;
		esac;;










	-h|--help)
	#show help
		echo -e "\\nusage:  setcpu {operation} [options]"
		echo "operations:"
		echo "  setcpu                     >  show current governor."
    echo "  setcpu {-h, --help}        >  show help."
    echo "  setcpu {-g, --governor}    >  set governor to all cores."
#    echo "  setcpu {-c, --core}        >  set governor to a specific core."
#   echo "  setcpu {-s, --set}         >  set a specific frequency clock"
#		echo "  setcpu {--min-freq}        >  set minimum frequency"
#   echo "  setcpu {--max-freq}        >  set maximum frequency"
#    echo "  setcpu {-w, --watch}       >  monitor cpu frequency changes."
		echo -e "  setcpu {-u, --uninstall}   >  uninstall setcpu.\\n"
		echo "aliases have been created in the rc file. to activate a governor, execute:"
		echo -e "performance, powersave, ondemand, conservative or schedutil to switch governor.\\n"
		;;
	*)
	#called when an invalid argument is passed
		echo "error: invalid argument: $1    (use -h for help)";;





esac
