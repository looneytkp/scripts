#!/bin/bash
set -e
shopt -u nocasematch
#installs dependencies required to use setcpu if not installed
if [ ! -e /usr/bin/cpupower ]; then
	sudo pacman -S cpupower
fi

DIR=~/.setcpu
FILE=$DIR/config
CPU=$DIR/cpu

#write function, called on first execution
_write() {
	ls /sys/devices/system/cpu/ | grep "cpu[0-9]" > $CPU
	if grep -q "setcpu" $FILE; then return
	else
		{
			echo "alias powersave=\"setcpu -g powersave\"\\nalias conservative=\"setcpu -g conservative\"\\nalias ondemand=\"setcpu -g ondemand\"\\nalias performance=\"setcpu -g performance\"\\nalias schedutil=\"setcpu -g schedutil\""
		} >> $FILE
	fi
	LLEHS=$(echo $SHELL|grep -oE "zsh|bash")
	if [ $LLEHS == bash ]; then
		echo "source $FILE;alias setcpu=\"bash $DIR/setcpu\"" >> ~/.bashrc
	elif [ $LLEHS == zsh ]; then
        echo "source $FILE;alias setcpu=\"bash $DIR/setcpu\"" >> ~/.zshrc
	fi
}
_check() {
if [ ! -d $DIR ]; then
	echo -e "setcpu is not installed\\nRun 'bash setcpu install' to install."
	exit
fi
}

case $1 in
#called when no argument is passed to the setcpu command
	"")
		_check
		echo -e "\\nCurrent governor:"
		a=$(wc -l <"$CPU"); b=0
		while true; do
			if [[ $b < $a ]]; then
				gov=$(cat /sys/devices/system/cpu/cpu"$b"/cpufreq/scaling_governor)
				echo "CPU$b: $gov"
				b=$((b+1))
			else
				break
			fi
		done
		printf "\\nUsage: "; uptime -p|sed "s/up //"
		upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage"|sed -e "s/.*state:               /State: /" -e "s/.*percentage:          /Percentage: /" -e "s/.*time to empty:       /Time to empty: /" -e "s/.*time to full:        /Time to full: /"
		echo;;
		
	install)
		printf "Installing setcpu..."
		if [ ! -d $DIR ]; then mkdir $DIR;fi
		touch $FILE; touch $CPU; _write
		cp -u setcpu $DIR;sleep 1;
		echo -e "done!";;

#uninstall
	uninstall)
		_check
		read -rp "uninstall setcpu? Y/n > " UNINSTALL
		case $UNINSTALL in
			y|yes)
				if [ -d $DIR ]; then
					LLEHS=$(echo $SHELL|grep -oE "zsh|bash")
					uninstall() {
						if grep -q "setcpu" $rc; then
							a=$(grep -n "setcpu" $rc|sed "s/:.*//")
							sed -i "$a"d $rc
						fi
					}
					if [ $LLEHS == bash ]; then
						rc=~/.bashrc
						uninstall
					elif [ $LLEHS == zsh ]; then
						rc=~/.zshrc
						uninstall
					fi
					rm -rf $DIR
					echo "done!"
				else
					echo "setcpu is not installed."
				fi;;
			n|no)
				exit 0;;
		esac;;
		
#set one governor for all cpu's
	governor)
		_check
		case $2 in
			"")
				echo -e "error: no governor specified\\nTry 'setcpu -h' for more information.";;
			performance|powersave|ondemand|conservative|schedutil)
				sudo cpupower frequency-set -g "$2"
				echo -e "\\nAll cpu's are set to $2\\n";;
			*)
				echo -e "error: incorrect governor: $2\\nRun 'setcpu -l' for list of governors.";;
		esac;;

	list)
		_check
		echo -e "\\nGovernors:\\n  conservative\\n  ondemand\\n  performance\\n  powersave\\n  schedutil\\n";;

	help)
	#show help
		echo -e "\\nUsage:  setcpu {operation} [options]\\nOperations:\\n  setcpu                     >  show current governor.\\n  setcpu {help}        >  show help.\\n  setcpu {governor}    >  set governor to all cores.\\n  setcpu {list}        >  list governors."
#    echo "  setcpu {-c, --core}        >  set governor to a specific core."
#   echo "  setcpu {-s, --set}         >  set a specific frequency clock"
#		echo "  setcpu {--min-freq}        >  set minimum frequency"
#   echo "  setcpu {--max-freq}        >  set maximum frequency"
#    echo "  setcpu {-w, --watch}       >  monitor cpu frequency changes."
		echo -e "  setcpu {install}     >  install setcpu\\n  setcpu {uninstall}   >  uninstall setcpu.\\n\\nShortcuts have been created, simply switch to desired governor by executing the name of governor.\\n"
		;;
	*)
	#called when an invalid argument is passed
		echo -e "error: invalid argument: $1\\nTry 'setcpu -h' for more information.";;
esac
