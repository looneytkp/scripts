#!/bin/bash
set -e
shopt -u nocasematch
#installs dependencies required to use cpuset if not installed
if [ ! -e /usr/bin/cpupower ]; then
	sudo pacman -S cpupower
fi
_write() {
	llehs=$(echo "$SHELL")
	if [[ $llehs == "/bin/bash" ]]; then
		if grep -q "cpuset" ~/.bashrc; then return
		else rc=~/.bashrc
		fi
	elif [[ $llehs == "/bin/zsh" ]]; then
		if grep -q "cpuset" ~/.bashrc; then return
		else rc=~/.zshrc
		fi
	else
	    echo "Cannot identify your shell"
	    exit;
	fi
	{
		echo
		echo 'alias powersave="cpuset -g powersave"'
		echo 'alias conservative="cpuset -g conservative"'
		echo 'alias ondemand="cpuset -g ondemand"'
		echo 'alias performance="cpuset -g performance"'
		echo 'alias schedutil="cpuset -g schedutil"'
		echo
	} >> $rc
}

_remove() {
	llehs=$(echo "$SHELL")
	if [[ $llehs == "/bin/bash" ]]; then
		rc=~/.bashrc
	else
		rc=~/.zshrc
	fi
	counter=$(grep -qn "powersave" "$rc"|sed "s/:alias po.*//")
	counter=$counter
	while true; do
		if grep -q "cpuset" "$rc"; then
			sed "\"$counter\"d" "$rc"
			counter=$((counter+1))
		else
			return
		fi;
	done
}

#installs cpuset on first execution
if [ ! -e /usr/bin/cpuset ]; then
	read -rp "cpuset is not installed, install ? Y/n > " INSTALL
	case "$INSTALL" in
		y|yes)
			_write
			sudo cp -v cpuset /usr/bin/
			echo "executing...";sleep 1;;
		n|no)
			exit 0;;
	esac
else
	#reinstalls cpuset if changes have been made
	if [ -e cpuset ]; then
		A=$(md5sum cpuset|sed "s/  c.*//")
		B=$(md5sum /usr/bin/cpuset|sed "s/  \\/.*//")
		if [ "$A" != "$B" ]; then
			read -rp "changes have been made to cpuset, update it ? Y/n > " UPDATE
			case "$UPDATE" in
				y|yes)
					_write
					sudo cp -v cpuset /usr/bin/
					echo "executing...";sleep 1;;
				n|no)
					exit 0;;
			esac
		fi
	fi
fi
TMP=~/.CPUSET
case $1 in
	"")
	    #called when no argument is passed to the cpuset command
	    
		echo -e "\\nCurrent governors:"
		_ZERO=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
		_ONE=$(cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor)
		_TWO=$(cat /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor)
		_THREE=$(cat /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor)
		echo "CPU0: $_ZERO";echo "CPU1: $_ONE";echo "CPU2: $_TWO"
		echo "CPU3: $_THREE";printf "\\nUsage: ";uptime -p|sed "s/up //"
		upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage"|sed -e "s/.*state:               /State: /" -e "s/.*percentage:          /Percentage: /" -e "s/.*time to empty:       /Time to empty: /" -e "s/.*time to full:        /Time to full: /"
		echo;;
	-g|--governor)
	#set governor to all cores
		case $2 in
			"")
				echo "error: no governor specified (use -h for help)"
				;;
			#governors
			performance|powersave|ondemand|conservative|schedutil)
				sudo cpupower frequency-set -g "$2"
				cpuset;;
			*)
				echo "error: incorrect governor: $2";;
		esac;;
	-c|--core)
	#set governor to a particular core
		_CORE() {
			sudo cpupower -c "$_CORE" frequency-set -g "$_GOV"
		}
		{	
			echo "performance"
			echo "powersave"
			echo "ondemand"
			echo "conservative"
			echo "schedutil"
		} > "$TMP"
		_CORE="$2"
		_GOV="$3"
		case $2 in
			"")
				echo "error: no core specified (use -h for help)"
				rm "$TMP";;
			0|1|2|3)
				if [ "$_GOV" == "" ]; then
					echo "error: no governor specified (use -h for help)"
				fi
				if grep -wq "$_GOV" "$TMP"; then
					_CORE;cpuset
				else
					echo "error: incorrect governor: $3"
				fi;;
			*)
				echo "error: cores start from 0 to 3";;
		esac
		rm "$TMP";;
#	-s|--set|--min-freq|--max-freq)
#		_FREQ() {
#			if [ "$ONE" == "-s" -o "$ONE" == --set ]; then
#				sudo cpupower frequency-set -f "$FREQ"
#			elif [ "$ONE" == --min-freq ]; then
#				sudo cpupower frequency-set -u "$FREQ"
#			elif [ "$ONE" == --max-freq ]; then
#				sudo cpupower frequency-set -d "$FREQ"
#			fi
#		}
#		ONE="$1"
#		TWO="$2"
#		if [ "$TWO" == "" ]; then
#			if [ "$ONE" == "-s" -o "$ONE" == --set ]; then
#				echo "[Specific Frequency]"
#			elif [ "$ONE" == --min-freq ]; then
#				echo "[Minimum Frequency]"
#			elif [ "$ONE" == --max-freq ]; then
#				echo "[Maximum Frequency]"
#			fi
#			cpupower frequency-info|grep "hardware limits"|sed "s/  hardware/Hardware/"
#			cpupower frequency-info|grep "frequency steps"|sed "s/  available/Available/"
#			cpupower frequency-info|grep "policy"|sed "s/  current/Policy/"
#			_ZERO=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
#			echo -e "The governor \"$_ZERO\" may decide which speed to use within this range.\\n"
#			read -rp "Frequency: " FREQ
#			echo "$FREQ" > "$TMP"
#			if grep -wqi "Ghz" "$TMP"; then
#				sed -i "s/ Ghz//" "$TMP"
#			else
#				FREQ=$(cat "$TMP")
#				cpupower frequency-info|
#				if grep -wq "$FREQ"; then
#					_FREQ
#				else
#					echo "error: incorrect frequency: $FREQ"
#				fi
#			fi
#		else
#			if grep -wq "$FREQ"; then
#				_FREQ
#			else
#				echo "error: incorrect frequency: $FREQ"
#			fi
#		fi
#		rm "$TMP";;
	-w|--watch)
	#monitor cpu speed in real time
		watch -n 0.5 grep \"cpu MHz\" /proc/cpuinfo;;
	-u|--uninstall)
	#uninstall
		read -rp "uninstall cpuset? Y/n > " UNINSTALL
		case $UNINSTALL in
			y|yes)
				if [ -e /usr/bin/cpuset ]; then
					sudo rm /usr/bin/cpuset
					echo "done!"
				else
					echo "cpuset is not installed"
				fi;;
			n|no)
				exit 0;;
		esac;;
	-h|--help)
	#show help
		echo -e "\\nusage:  cpuset {operation} [options]"
		echo "operations:"
		echo "  cpuset                     >  show current governor."
    echo "  cpuset {-h, --help}        >  show help."
    echo "  cpuset {-g, --governor}    >  set governor to all cores."
    echo "  cpuset {-c, --core}        >  set governor to a specific core."
#   echo "  cpuset {-s, --set}         >  set a specific frequency clock"
#		echo "  cpuset {--min-freq}        >  set minimum frequency"
#   echo "  cpuset {--max-freq}        >  set maximum frequency"
    echo "  cpuset {-w, --watch}       >  monitor cpu frequency changes."
		echo -e "  cpuset {-u, --uninstall}   >  uninstall cpuset.\\n"
		echo "aliases have been created in the rc file. to activate a governor, execute:"
		echo -e "performance, powersave, ondemand, conservative or schedutil to switch governor.\\n"
		;;
	*)
	#called when an invalid argument is passed
		echo "error: invalid argument: $1    (use -h for help)";;
esac
